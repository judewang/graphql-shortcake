// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`model ArrayMutator appendValue 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set user_ids = array_append(array_remove(user_ids, 10), 10), keyword = name is one, updated_by = 10, updated_at = DATE where deleted_at is null and id = 1 returning *",
  "update model_table set user_ids = array_append(array_remove(user_ids, 20), 20), keyword = name is one, updated_by = 10, updated_at = DATE where deleted_at is null and id = 1 returning *",
  "update model_table set user_ids = array_append(array_remove(user_ids, 10), 10), keyword = name is one, updated_by = 10, updated_at = DATE where deleted_at is null and id = 1 returning *",
  "select * from model_table where id in (1) and deleted_at is null",
]
`;

exports[`model ArrayMutator removeValue 1`] = `
Array [
  "select * from model_table where id in (2) and deleted_at is null",
  "update model_table set user_ids = array_remove(user_ids, 10), keyword = name is two, updated_by = 10, updated_at = DATE where deleted_at is null and id = 2 returning *",
  "select * from model_table where id in (2) and deleted_at is null",
]
`;

exports[`model Base columns object 1`] = `
Object {
  "createdAt": Object {
    "isArray": false,
    "paths": Array [
      "createdAt",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "createdBy": Object {
    "isArray": false,
    "paths": Array [
      "createdBy",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "data": Object {
    "isArray": false,
    "paths": Array [
      "data",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "deletedAt": Object {
    "isArray": false,
    "paths": Array [
      "deletedAt",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "deletedBy": Object {
    "isArray": false,
    "paths": Array [
      "deletedBy",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "name": Object {
    "isArray": false,
    "paths": Array [
      "name",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "nickName": Object {
    "isArray": false,
    "paths": Array [
      "nickName",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "password": Object {
    "isArray": false,
    "paths": Array [
      "password",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "total": Object {
    "isArray": false,
    "paths": Array [
      "total",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "updatedAt": Object {
    "isArray": false,
    "paths": Array [
      "updatedAt",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "updatedBy": Object {
    "isArray": false,
    "paths": Array [
      "updatedBy",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "userIds": Object {
    "isArray": true,
    "paths": Array [
      "userIds",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
}
`;

exports[`model Base columns thunk 1`] = `
Object {
  "createdAt": Object {
    "isArray": false,
    "paths": Array [
      "createdAt",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "data": Object {
    "isArray": false,
    "paths": Array [
      "data",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "deletedAt": Object {
    "isArray": false,
    "paths": Array [
      "deletedAt",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "name": Object {
    "isArray": false,
    "paths": Array [
      "name",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "password": Object {
    "isArray": false,
    "paths": Array [
      "password",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
  "updatedAt": Object {
    "isArray": false,
    "paths": Array [
      "updatedAt",
    ],
    "toType": [Function],
    "toValue": [Function],
    "type": [Function],
  },
}
`;

exports[`model DefaultValues save use default values 1`] = `
Array [
  "insert into model_table (created_at, created_by, keyword, name, updated_at, updated_by) values (DATE, 10, DEFAULT, go car, DATE, 10) returning *",
  "select * from model_table where id in (3) and deleted_at is null",
]
`;

exports[`model Fetcher fetch fetch one 1`] = `
Object {
  "createdAt": null,
  "createdBy": null,
  "data": null,
  "deletedAt": null,
  "deletedBy": null,
  "id": 1,
  "keyword": null,
  "name": "name is one",
  "nickName": "nick name is one",
  "password": null,
  "total": 0,
  "updatedAt": null,
  "updatedBy": null,
  "userIds": null,
}
`;

exports[`model Fetcher fetch fetch one 2`] = `
Array [
  "select * from model_table where deleted_at is null and name = name is one limit 1",
]
`;

exports[`model Fetcher fetch with where 1`] = `
Object {
  "createdAt": null,
  "createdBy": null,
  "data": null,
  "deletedAt": null,
  "deletedBy": null,
  "id": 1,
  "keyword": null,
  "name": "name is one",
  "nickName": "nick name is one",
  "password": null,
  "total": 0,
  "updatedAt": null,
  "updatedBy": null,
  "userIds": null,
}
`;

exports[`model Fetcher fetch with where 2`] = `
Array [
  "select * from model_table where nick_name = nick name is one and total = 0 and (name = name is one) and data IS NULL and deleted_at is null order by created_at asc limit 1",
]
`;

exports[`model Fetcher fetchAll no cache 1`] = `
Array [
  "name is one",
]
`;

exports[`model Fetcher fetchAll no cache 2`] = `
Array [
  "select *, count(*) OVER() AS total_count from model_table where deleted_at is null and name = name is one",
]
`;

exports[`model Fetcher fetchPage not set 1`] = `
Array [
  "name is one",
  "name is two",
]
`;

exports[`model Fetcher fetchPage not set 2`] = `
Array [
  "select *, count(*) OVER() AS total_count from model_table where deleted_at is null",
]
`;

exports[`model Fetcher fetchPage offset and first 1`] = `
Array [
  "name is two",
]
`;

exports[`model Fetcher fetchPage offset and first 2`] = `
Array [
  "select *, count(*) OVER() AS total_count from model_table where deleted_at is null limit 2 offset 1",
]
`;

exports[`model Fetcher saveIfNotExists when existed 1`] = `
Array [
  "select * from model_table where deleted_at is null and name = name is one limit 1",
]
`;

exports[`model Fetcher saveIfNotExists when not existed 1`] = `
Array [
  "select * from model_table where deleted_at is null and name = name is new limit 1",
  "insert into model_table (created_at, created_by, keyword, name, updated_at, updated_by) values (DATE, 10, name is new, name is new, DATE, 10) returning *",
]
`;

exports[`model GlobalId integer 1`] = `"invalid global type"`;

exports[`model Incrementer multiple 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set total = total + 10 where deleted_at is null and id = 1 returning *",
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set total = total + 10 where deleted_at is null and id = 1 returning *",
]
`;

exports[`model Incrementer single 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set total = total + 10 where deleted_at is null and id = 1 returning *",
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set total = total + 10 where deleted_at is null and id = 1 returning *",
]
`;

exports[`model JSONMutator addKeyValue 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set data = coalesce(data, '{}') || {\\"10\\":\\"xyz\\"}, keyword = name is one, updated_by = 10, updated_at = DATE where deleted_at is null and id = 1 returning *",
]
`;

exports[`model JSONMutator delKeyValue 1`] = `
Array [
  "select * from model_table where id in (2) and deleted_at is null",
  "update model_table set data = coalesce(data, '{}') - 10, keyword = name is two, updated_by = 10, updated_at = DATE where deleted_at is null and id = 2 returning *",
]
`;

exports[`model Loader no softDelete 1`] = `
Array [
  "insert into model_table (created_at, created_by, keyword, name, updated_at, updated_by) values (DATE, 10, for no soft delete load, for no soft delete load, DATE, 10) returning *",
  "update model_table set deleted_at = DATE, deleted_by = 10 where deleted_at is null and id = 3 returning *",
  "select * from model_view where id in (3)",
]
`;

exports[`model Loader softDelete 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "select * from model_table where id in (1, 2) and deleted_at is null",
]
`;

exports[`model Mutator destroy has operator 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set deleted_at = DATE, deleted_by = 10 where deleted_at is null and id = 1 returning *",
]
`;

exports[`model Mutator destroy no operator and no soft delete 1`] = `
Array [
  "select * from model_view where id in (1)",
  "delete from model_table where id = 1",
]
`;

exports[`model Mutator sent insert of save has operator 1`] = `
Array [
  "insert into model_table (created_at, created_by, keyword, name, updated_at, updated_by) values (DATE, 10, new is insert, new is insert, DATE, 10) returning *",
]
`;

exports[`model Mutator sent insert of save no operator 1`] = `
Array [
  "insert into model_table (created_at, name, updated_at) values (DATE, new is no operator insert, DATE) returning *",
]
`;

exports[`model Mutator sent update of save has operator 1`] = `
Array [
  "select * from model_table where id in (1) and deleted_at is null",
  "update model_table set name = name is update, keyword = name is update, updated_by = 20, updated_at = DATE where deleted_at is null and id = 1 returning *",
]
`;

exports[`model Mutator sent update of save no operator 1`] = `
Array [
  "select * from model_view where id in (1)",
  "update model_table set name = name is no operator update, updated_at = DATE where id = 1 returning *",
]
`;

exports[`model Searcher search 1`] = `
Array [
  "new for search",
  "new for action",
]
`;

exports[`model Searcher search 2`] = `
Array [
  "insert into model_table (created_at, created_by, keyword, name, updated_at, updated_by) values (DATE, 10, new for action, new for action, DATE, 10) returning *",
  "insert into model_table (created_at, created_by, keyword, name, updated_at, updated_by) values (DATE, 10, new for search, new for search, DATE, 10) returning *",
  "select ts_rank(keyword, query) as rank, *, count(*) OVER() AS total_count from model_table , to_tsquery('new|search') as query where keyword @@ query and deleted_at is null order by rank desc",
]
`;
